// Code generated by MockGen. DO NOT EDIT.
// Source: server/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	proto "github.com/PavelDonchenko/bookstorejRPC/server/gen/proto"
	models "github.com/PavelDonchenko/bookstorejRPC/server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(u models.User) (*proto.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", u)
	ret0, _ := ret[0].(*proto.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), u)
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(id uint32) (*proto.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(*proto.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), id)
}

// GetAllUsers mocks base method.
func (m *MockUserService) GetAllUsers(page uint32) (*proto.GetAllUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", page)
	ret0, _ := ret[0].(*proto.GetAllUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserServiceMockRecorder) GetAllUsers(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserService)(nil).GetAllUsers), page)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(id uint32) (*proto.GetUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*proto.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), id)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(u models.User) (*proto.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u)
	ret0, _ := ret[0].(*proto.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), u)
}

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookService) CreateBook(u models.Book) (*proto.CreateBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", u)
	ret0, _ := ret[0].(*proto.CreateBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookServiceMockRecorder) CreateBook(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookService)(nil).CreateBook), u)
}

// DeleteBook mocks base method.
func (m *MockBookService) DeleteBook(id uint32) (*proto.DeleteBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", id)
	ret0, _ := ret[0].(*proto.DeleteBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookServiceMockRecorder) DeleteBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookService)(nil).DeleteBook), id)
}

// GetAllBooks mocks base method.
func (m *MockBookService) GetAllBooks(page uint32) (*proto.GetAllBooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", page)
	ret0, _ := ret[0].(*proto.GetAllBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockBookServiceMockRecorder) GetAllBooks(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockBookService)(nil).GetAllBooks), page)
}

// GetBook mocks base method.
func (m *MockBookService) GetBook(id uint32) (*proto.GetBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", id)
	ret0, _ := ret[0].(*proto.GetBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBookServiceMockRecorder) GetBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookService)(nil).GetBook), id)
}

// UpdateBook mocks base method.
func (m *MockBookService) UpdateBook(u models.Book) (*proto.UpdateBookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", u)
	ret0, _ := ret[0].(*proto.UpdateBookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookServiceMockRecorder) UpdateBook(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookService)(nil).UpdateBook), u)
}

// MockBookHistoryService is a mock of BookHistoryService interface.
type MockBookHistoryService struct {
	ctrl     *gomock.Controller
	recorder *MockBookHistoryServiceMockRecorder
}

// MockBookHistoryServiceMockRecorder is the mock recorder for MockBookHistoryService.
type MockBookHistoryServiceMockRecorder struct {
	mock *MockBookHistoryService
}

// NewMockBookHistoryService creates a new mock instance.
func NewMockBookHistoryService(ctrl *gomock.Controller) *MockBookHistoryService {
	mock := &MockBookHistoryService{ctrl: ctrl}
	mock.recorder = &MockBookHistoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookHistoryService) EXPECT() *MockBookHistoryServiceMockRecorder {
	return m.recorder
}

// DeleteBookHistory mocks base method.
func (m *MockBookHistoryService) DeleteBookHistory(ctx context.Context, id uint64) (*proto.DeleteHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookHistory", ctx, id)
	ret0, _ := ret[0].(*proto.DeleteHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBookHistory indicates an expected call of DeleteBookHistory.
func (mr *MockBookHistoryServiceMockRecorder) DeleteBookHistory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookHistory", reflect.TypeOf((*MockBookHistoryService)(nil).DeleteBookHistory), ctx, id)
}

// GetOneBookHistory mocks base method.
func (m *MockBookHistoryService) GetOneBookHistory(ctx context.Context, id uint64) (*proto.GetOneHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneBookHistory", ctx, id)
	ret0, _ := ret[0].(*proto.GetOneHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneBookHistory indicates an expected call of GetOneBookHistory.
func (mr *MockBookHistoryServiceMockRecorder) GetOneBookHistory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneBookHistory", reflect.TypeOf((*MockBookHistoryService)(nil).GetOneBookHistory), ctx, id)
}

// InsertBookHistory mocks base method.
func (m *MockBookHistoryService) InsertBookHistory(ctx context.Context, bh models.BookHistory) (*proto.InsertHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBookHistory", ctx, bh)
	ret0, _ := ret[0].(*proto.InsertHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertBookHistory indicates an expected call of InsertBookHistory.
func (mr *MockBookHistoryServiceMockRecorder) InsertBookHistory(ctx, bh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBookHistory", reflect.TypeOf((*MockBookHistoryService)(nil).InsertBookHistory), ctx, bh)
}
